---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.kafka.name }}-svc
  labels:
    app: {{ .Values.kafka.name }}
  namespace: {{ .Values.namespace }}
spec:
  ports:
  - port: {{ .Values.kafka.port.port }}
    name: {{ .Values.kafka.port.name }}
  clusterIP: None
  selector:
    app: {{ .Values.kafka.name }}
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: {{ .Values.kafka.name }}-pdb
  namespace: {{ .Values.namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.kafka.name }}
  minAvailable: {{ .Values.kafka.disruption.minAvailable }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.kafka.name }}
  namespace: {{ .Values.namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.kafka.name }}
  serviceName: {{ .Values.kafka.name }}-svc
  replicas: {{ .Values.kafka.statefulSet.replicas }}
  template:
    metadata:
      labels:
        app: {{ .Values.kafka.name }}
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values: 
                    - {{ .Values.kafka.name }}
              topologyKey: "{{ .Values.affinityTopologyKey }}"
        podAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
             - weight: 1
               podAffinityTerm:
                 labelSelector:
                    matchExpressions:
                      - key: "app"
                        operator: In
                        values: 
                        - {{ .Values.zookeeper.name }}
                 topologyKey: "{{ .Values.affinityTopologyKey }}"
      terminationGracePeriodSeconds: {{ .Values.kafka.statefulSet.terminationPeriodSec }}
      nodeSelector:
        nodetype: {{ .Values.kafka.statefulSet.nodeName }}
      containers:
      - name: k8skafka
        imagePullPolicy: {{ .Values.kafka.statefulSet.imagePullPolicy }}
        image: {{ .Values.kafka.statefulSet.imageName }}
        resources:
          requests:
{{- range $key, $val := .Values.kafka.statefulSet.resources }}
            {{ $key }}: {{ $val }}
{{- end }}
        ports:
        - containerPort: {{ .Values.kafka.port.port }}
          name: {{ .Values.kafka.port.name }}
        command:
        - sh
        - -c
        - "exec kafka-server-start.sh /opt/kafka/config/server.properties --override broker.id=${HOSTNAME##*-} \
          --override listeners=INTERNAL_PLAINTEXT://:{{ .Values.kafka.port.port }} \
          --override zookeeper.connect=
{{- $root := . -}}
{{- range $i, $e := until (int .Values.zookeeper.statefulSet.replicas) -}}
    {{- $root.Values.zookeeper.name }}-{{ $i }}.{{ $root.Values.zookeeper.name }}-svc.{{ $root.Values.namespace }}.svc.cluster.local:{{ $root.Values.zookeeper.ports.client }}
    {{- if eq (int (sub $i 1) ) (int $root.Values.zookeeper.statefulSet.replicas) }} \{{ else }},{{- end }}
{{- end }}
          --override log.dir={{ .Values.kafka.statefulSet.internalPath }} \
          --override listener.security.protocol.map=INTERNAL_PLAINTEXT:PLAINTEXT \
          --override advertised.listeners=INTERNAL_PLAINTEXT://:{{ .Values.kafka.port.port }} \
          --override inter.broker.listener.name=INTERNAL_PLAINTEXT "
        env:
        - name: KAFKA_HEAP_OPTS
          value : "-Xmx512M -Xms512M"
        - name: KAFKA_OPTS
          value: "-Dlogging.level=INFO"
        volumeMounts:
        - name: datadir
          mountPath: {{ .Values.kafka.statefulSet.internalPath }}
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
{{- if eq .Values.kafkaStorage.type "NFS" }}
      selector:
        matchLabels:
          type: nfs
          app: {{ .Values.kafka.name }}
{{- end }}
      accessModes: [ "{{ if eq .Values.kafkaStorage.type "NFS" }}ReadWriteMany{{ else }}ReadWriteOnce{{ end }}" ]
      resources:
        requests:
          storage: {{ .Values.kafka.statefulSet.volumeClaimTemplate.storageSize }}
      storageClassName: {{ .Values.kafkaStorage.storageClass }}
