---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.zookeeper.name }}-svc
  labels:
    app: {{ .Values.zookeeper.name }}-svc
  namespace: {{ .Values.namespace }}
spec:
  ports:
{{- range $key, $port := .Values.zookeeper.ports }}
{{- if ne $key "client" }}
    - name: {{ $key }}
      port: {{ $port }}
{{- end }}
{{- end }}
  clusterIP: None
  selector:
    app: {{ .Values.zookeeper.name }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.zookeeper.name }}-cm
  namespace: {{ .Values.namespace }}
data:
{{- range $key, $val := .Values.zookeeper.config }}
  {{ $key }}: {{ $val | quote }}
{{- end }}
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: {{ .Values.zookeeper.name }}-pdb
  namespace: {{ .Values.namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.zookeeper.name }}
  minAvailable: {{ .Values.zookeeper.disruption.minAvailable }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.zookeeper.name }}
  namespace: {{ .Values.namespace }}
spec:
  selector:
    matchLabels:
      app: {{ .Values.zookeeper.name }}
  serviceName: {{ .Values.zookeeper.name }}-svc
  replicas: {{ .Values.zookeeper.statefulSet.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.zookeeper.name }}
  terminationGracePeriodSeconds: {{ .Values.zookeeper.statefulSet.terminationPeriodSec }}
  updateStrategy:
    type:  {{ .Values.updateStrategy }}
  podManagementPolicy: {{ .Values.podManagementPolicy }}
  template:
    metadata:
      labels:
        app: {{ .Values.zookeeper.name }}
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: app
                    operator: In
                    values: 
                    - {{ .Values.zookeeper.name }}
              topologyKey: {{ .Values.affinityTopologyKey }}
      nodeSelector:
        nodetype: {{ .Values.zookeeper.statefulSet.nodeName }}
      containers:
      - name: k8szk
        imagePullPolicy: {{ .Values.zookeeper.statefulSet.imagePullPolicy }}
        image: {{ .Values.zookeeper.statefulSet.imageName }}
        resources:
          requests:
{{- range $key, $val := .Values.zookeeper.statefulSet.resources }}
            {{ $key }}: {{ $val }}
{{- end }}
        ports:
{{- range $key, $port := .Values.zookeeper.ports }}
          - containerPort: {{ $port }}
            name: {{ $key }}
{{- end }}
        env:
        - name : ZK_REPLICAS
          value: "{{ .Values.zookeeper.statefulSet.replicas }}"
        - name : ZK_HEAP_SIZE
          valueFrom:
            configMapKeyRef:
                name: {{ .Values.zookeeper.name }}-cm
                key: jvm.heap
        - name : ZK_TICK_TIME
          valueFrom:
            configMapKeyRef:
                name: {{ .Values.zookeeper.name }}-cm
                key: tick
        - name : ZK_INIT_LIMIT
          valueFrom:
            configMapKeyRef:
                name: {{ .Values.zookeeper.name }}-cm
                key: init
        - name : ZK_SYNC_LIMIT
          valueFrom:
            configMapKeyRef:
                name: {{ .Values.zookeeper.name }}-cm
                key: tick
        - name : ZK_MAX_CLIENT_CNXNS
          valueFrom:
            configMapKeyRef:
                name: {{ .Values.zookeeper.name }}-cm
                key: client.cnxns
        - name: ZK_SNAP_RETAIN_COUNT
          valueFrom:
            configMapKeyRef:
                name: {{ .Values.zookeeper.name }}-cm
                key: snap.retain
        - name: ZK_PURGE_INTERVAL
          valueFrom:
            configMapKeyRef:
                name: {{ .Values.zookeeper.name }}-cm
                key: purge.interval
        - name: ZK_CLIENT_PORT
          value: "{{ .Values.zookeeper.ports.client }}"
        - name: ZK_SERVER_PORT
          value: "{{ .Values.zookeeper.ports.server }}"
        - name: ZK_ELECTION_PORT
          value: "{{ .Values.zookeeper.ports.leaderelection }}"
        command:
        - sh
        - -c
        - zkGenConfig.sh && zkServer.sh start-foreground
        readinessProbe:
          exec:
            command:
            - "zkOk.sh"
          initialDelaySeconds: {{ .Values.zookeeper.statefulSet.check.initDelaySec }}
          timeoutSeconds: {{ .Values.zookeeper.statefulSet.check.timeoutSec }}
        livenessProbe:
          exec:
            command:
            - "zkOk.sh"
          initialDelaySeconds: {{ .Values.zookeeper.statefulSet.check.initDelaySec }}
          timeoutSeconds: {{ .Values.zookeeper.statefulSet.check.timeoutSec }}
        volumeMounts:
        - name: datadir
          mountPath: {{ .Values.zookeeper.statefulSet.internalPath }}
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
{{- if eq .Values.zkStorage.type "NFS" }}
      selector:
        matchLabels:
          type: nfs
          app: {{ .Values.zookeeper.name }}
{{- end }}
      accessModes: [ "{{ if eq .Values.zkStorage.type "NFS" }}ReadWriteMany{{ else }}ReadWriteOnce{{ end }}" ]
      resources:
        requests:
          storage: {{ .Values.zookeeper.statefulSet.volumeClaimTemplate.storageSize }}
      storageClassName: {{ .Values.zkStorage.storageClass }}
 
